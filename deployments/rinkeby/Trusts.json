{
  "address": "0x5dD0225731F5ff2bE9574e647dB9aE2CFa1a13dA",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "LogCreateTrust",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "etherAmount",
          "type": "uint256"
        }
      ],
      "name": "LogDepositTrust",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "LogRemoveTrust",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "LogUpdateTrust",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "etherAmount",
          "type": "uint256"
        }
      ],
      "name": "LogWithdrawTrust",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "canWithdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "trustees",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        },
        {
          "internalType": "enum Trusts.TrustType",
          "name": "trustType",
          "type": "uint8"
        }
      ],
      "name": "createTrust",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "deleteTrust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "depositTrust",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "getTrust",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "grantor",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "trustees",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "etherAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        },
        {
          "internalType": "enum Trusts.TrustType",
          "name": "trustType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTrustAtIndex",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getTrustName",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "trustees",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "updateTrust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "trustees",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "validateAddresses",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "etherAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9dfa66939bea9c45997c32ae994cc7bc4767bb061c3dbc4bddeb5fe4a4b2454e",
  "receipt": {
    "to": null,
    "from": "0x3B634A7DFa0402581128ceF8bEBbE747449c76Bf",
    "contractAddress": "0x5dD0225731F5ff2bE9574e647dB9aE2CFa1a13dA",
    "transactionIndex": 11,
    "gasUsed": "3312417",
    "logsBloom": "0x
    "blockHash": "0x1e038c98b0a6caf46332b301c0b362ee22205e791ae62cfe58c26aedd554e29d",
    "transactionHash": "0x9dfa66939bea9c45997c32ae994cc7bc4767bb061c3dbc4bddeb5fe4a4b2454e",
    "logs": [],
    "blockNumber": 9152583,
    "cumulativeGasUsed": "4049178",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "095254ac1261a47db8d3228ceb21cdec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"LogCreateTrust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"LogDepositTrust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"LogRemoveTrust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"LogUpdateTrust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawTrust\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"trustees\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"enum Trusts.TrustType\",\"name\":\"trustType\",\"type\":\"uint8\"}],\"name\":\"createTrust\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"deleteTrust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"depositTrust\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getTrust\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"grantor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"trustees\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"enum Trusts.TrustType\",\"name\":\"trustType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTrustAtIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getTrustName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"trustees\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"updateTrust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"trustees\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"validateAddresses\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createTrust(address,address[],string,uint256,uint8)\":{\"params\":{\"beneficiary\":\"Who is this for\",\"maturityDate\":\"When this trust matures (is accessible)\",\"name\":\"Name of trust\",\"trustType\":\"Type of trust\",\"trustees\":\"Trustee to manage trust\"}},\"validateAddresses(address,address[],address)\":{\"params\":{\"beneficiary\":\"Beneficiary string\",\"sender\":\"msg.Sender\",\"trustees\":\"Trustees\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor function\"},\"createTrust(address,address[],string,uint256,uint8)\":{\"notice\":\"Create a new trust\"},\"validateAddresses(address,address[],address)\":{\"notice\":\"Validate address fields for a trust\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Trusts.sol\":\"Trusts\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/contracts/Bytes32Set.sol\":{\"content\":\"//pragma solidity ^0.6.0;\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// SPDX-License-Identifier: Unlicensed\\n\\nlibrary Bytes32Set {\\n    \\n    struct Set {\\n        mapping(bytes32 => uint) keyPointers;\\n        bytes32[] keyList;\\n    }\\n    \\n    /**\\n     * @notice insert a key. \\n     * @dev duplicate keys are not permitted.\\n     * @param self storage pointer to a Set. \\n     * @param key value to insert.\\n     */\\n    function insert(Set storage self, bytes32 key) internal {\\n        require(!exists(self, key), \\\"Bytes32Set: key already exists in the set.\\\");\\n        self.keyPointers[key] = self.keyList.length;\\n        self.keyList.push(key);\\n    }\\n\\n    /**\\n     * @notice remove a key.\\n     * @dev key to remove must exist. \\n     * @param self storage pointer to a Set.\\n     * @param key value to remove.\\n     */\\n    function remove(Set storage self, bytes32 key) internal {\\n        require(exists(self, key), \\\"Bytes32Set: key does not exist in the set.\\\");\\n        uint last = count(self) - 1;\\n        uint rowToReplace = self.keyPointers[key];\\n        if(rowToReplace != last) {\\n            bytes32 keyToMove = self.keyList[last];\\n            self.keyPointers[keyToMove] = rowToReplace;\\n            self.keyList[rowToReplace] = keyToMove;\\n        }\\n        delete self.keyPointers[key];\\n        self.keyList.pop();\\n    }\\n\\n    /**\\n     * @notice count the keys.\\n     * @param self storage pointer to a Set. \\n     */    \\n    function count(Set storage self) internal view returns(uint) {\\n        return(self.keyList.length);\\n    }\\n    \\n    /**\\n     * @notice check if a key is in the Set.\\n     * @param self storage pointer to a Set.\\n     * @param key value to check. \\n     * @return bool true: Set member, false: not a Set member.\\n     */\\n    function exists(Set storage self, bytes32 key) internal view returns(bool) {\\n        if(self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */    \\n    function keyAtIndex(Set storage self, uint index) internal view returns(bytes32) {\\n        return self.keyList[index];\\n    }\\n}\",\"keccak256\":\"0x665c81b940dd4af80fa6cf2ff521a20970d7c365cea35d0e12b9d182864ac404\",\"license\":\"Unlicensed\"},\"src/contracts/Trusts.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.9.0;\\n\\n// SPDX-License-Identifier: Unlicensed\\n\\nimport { Bytes32Set } from \\\"./Bytes32Set.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Trusts {\\n \\n    using Bytes32Set for Bytes32Set.Set;\\n    Bytes32Set.Set trustSet;\\n\\n    /*\\n    REVOKABLE: grantor can change or modify trust at will\\n    IRREVOKABLE: grantor cannot change or modify trust\\n    CHARITABLE: IRREVOKABLE - Benefits GRANTOR, beneficiary AND a qualified CHARITY\\n    CHARITABLE LEAD: (CLAT) Provides support to a charity through an annuity for a period of time. Remaining assets eventually go to beneficiary\\n    CHARITABLE REMAINDER: (CRAT) Opposite of CLAT: Benefits accrue to grantor and beneficiary for a period of time, with remainder going to charity\\n    QTIP: Qualified Terminable Interest Property Trust: Provide income for surviving spouse. Grantor controls assets after the death of the spouse.\\n    GRAT: Grantor Retained Annuity Trust: IRREVOKABLE - setup for certain period of time to minimize taxes on large financial gifts to beneficiary. \\n        Trustor pays taxes on the assets when the trust is establiehd and received an annual annuity payment for the term of the GRAT.\\n        When the term ends, the beneficiary reveive the remaining assets.\\n    ILIT: IRREVOKABLE LIFE INSURANCE TRUST -  LIFE INSURNACE ONLY - NOT APPLICABLE\\n    FUNDERAL: IRREVOKABLE - Set aside money to cover burial and funeral costs. Funeral homes often serve as the trustee\\n    SPENDTHRIFT: Protects inherited assets from the potential of financial irresponsibility of the beneficiary.\\n        The assets belong to the trust, the beneficiary and their creditors do not have direct access or control.\\n        The trustee has sole discretion to decide how the trust assets will be distributed.\\n        May choose certain $ amount per year, or may direct what the money can be spent on.\\n    SPECIAL_NEEDS: Allows Trustee to decide and direct how the assets of the trust can be used for a beneficiary.\\n    GENERATION_SKIPPING: Skips kids and goes to grandkids.\\n    TOTTEN: AKA Payable on Death.  Beneficiary directly receives assets of the trust upon death of grantor.\\n        Grantor can add and withdraw funds from the trust while they are living.  \\n        Grantor may also change beneficiary if needed or desired. \\n\\n    */\\n\\n    /*\\n    TODO: Support multiple trustees\\n    TODO: Support reporting of trustee and grantor actions to beneficiary (Withdrawals, Deposits, Returns )\\n    TODO: Support \\\"Grantor death event\\\" - which switches the trust to irrevokable and activates the trustee\\n            (Also support DUAL trustors (Spouses) such that one death transfers to the living trustor)\\n    TODO: How to determine death? \\n    TODO: Rules: beneficiary to receive income from trust until a certain age, at which point the property will distrubute to them\\n    TODO: ADD Support for Successor trustee. 1) Grantor = Trustee until death.  ONLY For REVOKABLE TRUST\\n\\n    */\\n    // need multiple beneficiary\\n/*\\n    (1) revocable trust, \\n    (2) irrevocable trust, \\n    (3) QTIP, // needs spouse account - irrevokable\\n    (5) GRAT, // irrevokable\\n    (6) special needs\\n    provision to allow benficiary access at all\\n*/\\n    enum TrustType { \\n        REVOKABLE,\\n        IRREVOKABLE,\\n        QTIP,          \\n        GRAT,       \\n        SPECIAL_NEEDS,\\n        SPENDTHRIFT\\n    }\\n\\n    TrustType constant DEFAULT_TYPE = TrustType.REVOKABLE;\\n    \\n    // data structure that stores a trust\\n    struct Trust {\\n        bytes32 key;\\n        string name;\\n        address grantor;\\n        address[] trustees;\\n        address beneficiary;\\n        uint etherAmount;\\n        uint createdDate;\\n        uint maturityDate;\\n        TrustType trustType;\\n    }\\n    \\n    mapping(bytes32 => Trust) trusts;\\n    \\n    event LogCreateTrust(address sender, bytes32 key);\\n    event LogUpdateTrust(address sender, bytes32 key);    \\n    event LogDepositTrust(address sender, bytes32 key, uint etherAmount);    \\n    event LogRemoveTrust(address sender, bytes32 key);\\n    event LogWithdrawTrust(address sender, bytes32 key, uint etherAmount);\\n\\n    /**\\n     * Constructor function\\n     */\\n    constructor() {\\n    }\\n\\n    function hashKey(string memory _name,\\n                  uint _num,\\n                  address _sender,\\n                  address _beneficiary,\\n                  uint _timestamp) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_name, _num, _sender, _beneficiary, _timestamp));\\n    }\\n\\n    /**\\n     * Create a new trust\\n     * @param beneficiary Who is this for\\n     * @param trustees Trustee to manage trust\\n     * @param name Name of trust\\n     * @param maturityDate When this trust matures (is accessible)\\n     * @param trustType Type of trust\\n     */\\n    function createTrust (address beneficiary, \\n                          address[] memory trustees,\\n                          string memory name,\\n                          uint maturityDate,\\n                          TrustType trustType) \\n                          \\n                          public payable returns(bytes32 key) {\\n        \\n\\n        validateAddresses(beneficiary, trustees, msg.sender);\\n\\n        bytes32 newKey = hashKey(name, maturityDate, msg.sender, beneficiary, block.timestamp);\\n        \\n        trustSet.insert(newKey); // Note that this will fail automatically if the key already exists.\\n        \\n        Trust storage t = trusts[newKey];\\n        \\n        t.key = newKey;\\n        t.name = name;\\n        t.beneficiary = beneficiary;\\n        t.trustees = trustees;\\n        t.etherAmount = msg.value;\\n        t.grantor = msg.sender;\\n        t.createdDate = block.timestamp;\\n        t.maturityDate = maturityDate;\\n        t.trustType = trustType;\\n        \\n        console.log(\\\"Trust.sol::createTrust() - createTrust Event Emitting NOW....: KEY: \\\");\\n        console.logBytes32(t.key);\\n\\n        emit LogCreateTrust(msg.sender, t.key);\\n        \\n        return (t.key);\\n    }\\n\\n    function updateTrust(bytes32 key, \\n                         address beneficiary, \\n                         address[] memory trustees,\\n                         string memory name,  \\n                         uint maturityDate) public {\\n        \\n        require(trustSet.exists(key), \\\"Can't update a trust that doesn't exist.\\\");\\n        Trust storage t = trusts[key];\\n\\n        require(msg.sender == t.grantor, \\\"Only the grantor can update this trust.\\\");\\n\\n        t.name = name;\\n        \\n        validateAddresses(beneficiary, trustees, msg.sender);\\n\\n        // Apply changes for REVOKABLE trust type only\\n        // IF trying to change one of these fields on NON-revokable trust type, throw an error\\n        if(t.trustType != TrustType.REVOKABLE && (t.beneficiary != beneficiary || t.maturityDate != maturityDate)) {\\n        \\n            revert(\\\"Beneficiary, Trustees and Maturity date can only be updated in a REVOKABLE trust\\\");\\n        \\n        } else if(t.trustType == TrustType.REVOKABLE) {\\n\\n            t.beneficiary = beneficiary;\\n            t.trustees = trustees;\\n            t.maturityDate = maturityDate;\\n            emit LogUpdateTrust(msg.sender, t.key);\\n        \\n        } \\n\\n    }\\n    \\n    /**\\n     * Validate address fields for a trust\\n     * @param beneficiary Beneficiary string\\n     * @param trustees Trustees\\n     * @param sender msg.Sender\\n     */\\n    function validateAddresses(address beneficiary, \\n                                address[] memory trustees,\\n                                address sender) public pure {\\n\\n        require(!exists(beneficiary, trustees), \\\"Beneficiary cannot be a trustee\\\");\\n\\n        require(!exists(sender, trustees), \\\"Grantor cannot be a trustee\\\");\\n\\n        require(beneficiary != sender, \\\"Beneficiary cannot be grantor\\\");\\n        \\n        for (uint i=0;i<trustees.length;i++)\\n            require(trustees[i] == address(trustees[i]), \\\"Invalid Trustee address\\\");\\n                                \\n    }\\n\\n    function depositTrust(bytes32 key) public payable {\\n        \\n        require(trustSet.exists(key), \\\"Can't update a trust that doesn't exist.\\\");\\n        \\n        Trust storage t = trusts[key];\\n\\n        t.etherAmount += msg.value;\\n\\n        emit LogDepositTrust(msg.sender, key, msg.value);\\n    }\\n    \\n    function deleteTrust(bytes32 key) public {\\n\\n        require(trustSet.exists(key), \\\"Can't delete a trust that doesn't exist.\\\");\\n        \\n        Trust memory t = trusts[key];\\n\\n        require(t.etherAmount == 0, \\\"Can't delete a trust with ether, withdraw first.\\\");\\n        require(msg.sender == t.grantor, \\\"Only the grantor can delete this trust.\\\");\\n\\n        trustSet.remove(key); // Note that this will fail automatically if the key doesn't exist\\n        \\n        delete trusts[key];\\n        \\n        emit LogRemoveTrust(msg.sender, key);\\n    }\\n\\n    function getTrustName(bytes32 key) public view returns(string memory name) {\\n        require(trustSet.exists(key), \\\"Trust not found\\\");\\n        Trust storage t = trusts[key];\\n        return t.name;\\n    }\\n    function getTrust(bytes32 _key) public view returns( bytes32 key,\\n                                                        string memory name, \\n                                                        address grantor,\\n                                                        address[] memory trustees,\\n                                                        address beneficiary,\\n                                                        uint etherAmount,\\n                                                        uint createdDate,\\n                                                        uint maturityDate,\\n                                                        TrustType trustType) {\\n        \\n        require(trustSet.exists(_key), \\\"Can't get a trust that doesn't exist.\\\");\\n        \\n        Trust storage t = trusts[_key];\\n\\n        return(t.key, t.name, t.grantor, t.trustees, t.beneficiary, t.etherAmount, t.createdDate, t.maturityDate, t.trustType);\\n    }\\n    \\n    function getTrustCount() public view returns(uint count) {\\n        return trustSet.count();\\n    }\\n    \\n    function getTrustAtIndex(uint index) public view returns(bytes32 key) {\\n       \\n        if(trustSet.count() == 0) {\\n            console.log(\\\"getTrustAtIndex() - trustSet.count is 0\\\");\\n            return 0;\\n        }\\n        else\\n            return trustSet.keyAtIndex(index);\\n    }\\n\\n    function canWithdraw(bytes32 key, address sender) public view returns(bool result, string memory reason) {\\n        require(trustSet.exists(key), \\\"Trust doesn't exist.\\\");\\n\\n        Trust storage t = trusts[key];\\n\\n        if(t.trustType == TrustType.REVOKABLE) {\\n            if(sender == t.grantor || \\n               sender == t.beneficiary || \\n               exists(sender, t.trustees))\\n                result = true;\\n            else \\n                reason = \\\"REVOKABLE type trust may be withdrawn only by grantor, beneficiary or trustee\\\";\\n\\n        } else if (t.trustType == TrustType.IRREVOKABLE) {\\n            if(sender == t.beneficiary || \\n                exists(sender, t.trustees))\\n                result = true;\\n            else \\n                reason = \\\"IRREVOKABLE type trust may be withdrawn only by beneficiary or trustee\\\";\\n\\n        } else { \\n            if(sender == t.grantor || exists(sender, t.trustees))\\n                result = true;\\n            else\\n                reason = \\\"DEFAULT trust type: may be withdrawn only by grantor or trustee\\\";\\n        }\\n        return (result, reason);\\n    }\\n    \\n    function withdraw (bytes32 key, uint etherAmount) public payable {\\n        require(trustSet.exists(key), \\\"Trust doesn't exist.\\\");\\n\\n        Trust storage t = trusts[key];\\n\\n        bool result = false;\\n        string memory reason = \\\"\\\";\\n\\n        (result, reason) = canWithdraw(key, msg.sender);\\n\\n        if(!result) revert(reason);\\n\\n        // beneficiary can only withdraw AFTER the maturityDate\\n        // TODO: Support \\\"DEATH\\\" of grantor in addition to maturityDate \\n        if(msg.sender == t.beneficiary && \\n            t.maturityDate > block.timestamp) {\\n            revert(\\\"beneficiary can only withdraw AFTER maturity date\\\");\\n        }\\n        // Check ETHER Amount\\n        if(etherAmount > t.etherAmount) {\\n            revert(\\\"Can't withdraw more ether than exists in trust\\\");\\n        }\\n\\n        payable(msg.sender).transfer(etherAmount);\\n        \\n        t.etherAmount -= etherAmount;\\n\\n        emit LogWithdrawTrust(msg.sender, key, etherAmount);\\n\\n        console.log(\\\"Trust.sol - withdraw(), key: ${key} etherAmount: ${_etherAmount}\\\");\\n\\n    }\\n    \\n    function withdrawAll (bytes32 key) public payable {\\n    \\n        require(trustSet.exists(key), \\\"Trust doesn't exist.\\\");\\n        Trust memory t = trusts[key];\\n        console.log(\\\"Trust.sol - withdrawAll(), key: \\\");\\n        withdraw(key, t.etherAmount);\\n\\n    }\\n\\n    /**\\n        PRIVATE helpers    \\n     */\\n    function exists(address item, address[] memory list) private pure returns(bool result) {\\n        for(uint i = 0; i < list.length; i++)\\n            if(item == list[i])\\n                return true;\\n\\n        return false;\\n    }\\n    \\n}\\n\",\"keccak256\":\"0x3c9298f96766b69ec5aa6050793040cd6614ddb4080248dde7df843fe4e40bbd\",\"license\":\"Unlicensed\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613b55806100206000396000f3fe6080604052600436106100a75760003560e01c8063b6309f5611610064578063b6309f56146101c5578063b6a07ee7146101ee578063bf29b8591461021e578063c05fdce914610247578063c42c6e141461028c578063e80dfb9a146102a8576100a7565b8063040cf020146100ac5780630905fa12146100c85780632106764c146100e45780632f9088a81461012257806343782b981461014b578063891a193614610188575b600080fd5b6100c660048036038101906100c191906128c1565b6102d3565b005b6100e260048036038101906100dd91906127b5565b610554565b005b3480156100f057600080fd5b5061010b600480360381019061010691906127de565b610618565b604051610119929190612d9c565b60405180910390f35b34801561012e57600080fd5b50610149600480360381019061014491906126a7565b610b4a565b005b34801561015757600080fd5b50610172600480360381019061016d91906127b5565b610d60565b60405161017f9190612e82565b60405180910390f35b34801561019457600080fd5b506101af60048036038101906101aa91906128fd565b610e61565b6040516101bc9190612dcc565b60405180910390f35b3480156101d157600080fd5b506101ec60048036038101906101e791906127b5565b610ebc565b005b6102086004803603810190610203919061270e565b61136f565b6040516102159190612dcc565b60405180910390f35b34801561022a57600080fd5b506102456004803603810190610240919061281a565b611563565b005b34801561025357600080fd5b5061026e600480360381019061026991906127b5565b6118e9565b60405161028399989796959493929190612de7565b60405180910390f35b6102a660048036038101906102a191906127b5565b611b0f565b005b3480156102b457600080fd5b506102bd611e50565b6040516102ca91906130c4565b60405180910390f35b6102e7826000611e6190919063ffffffff16565b610326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031d90612fa4565b60405180910390fd5b600060026000848152602001908152602001600020905060008060405180602001604052806000815250905061035c8533610618565b8092508193505050816103a657806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039d9190612e82565b60405180910390fd5b8260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156104085750428360070154115b15610448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043f90612f24565b60405180910390fd5b826005015484111561048f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048690612f44565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f193505050501580156104d5573d6000803e3d6000fd5b50838360050160008282546104ea9190613217565b925050819055507f5ae28b04e258b744ffadc4e526ca76cd9c4647e0450f1a47d9e9e1b0d9ff2a1c33868660405161052493929190612d65565b60405180910390a161054d604051806060016040528060408152602001613aa160409139611ee2565b5050505050565b610568816000611e6190919063ffffffff16565b6105a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059e90612ec4565b60405180910390fd5b6000600260008381526020019081526020016000209050348160050160008282546105d291906131c1565b925050819055507f6eb28f0a04b486596652b2118fc11d3db7715c960d01ae45b38fd69df9b7886333833460405161060c93929190612d65565b60405180910390a15050565b60006060610630846000611e6190919063ffffffff16565b61066f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066690612fa4565b60405180910390fd5b6000600260008681526020019081526020016000209050600060058111156106c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160080160009054906101000a900460ff16600581111561070a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610885578060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806107bd57508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b806108565750610855848260030180548060200260200160405190810160405280929190818152602001828054801561084b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610801575b5050505050611f7b565b5b156108645760019250610880565b6040518060800160405280604d8152602001613a54604d913991505b610b42565b600160058111156108bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160080160009054906101000a900460ff166005811115610909577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610a2a578060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806109fb57506109fa84826003018054806020026020016040519081016040528092919081815260200182805480156109f057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116109a6575b5050505050611f7b565b5b15610a095760019250610a25565b6040518060800160405280604681526020016139a36046913991505b610b41565b8060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b165750610b158482600301805480602002602001604051908101604052809291908181526020018280548015610b0b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ac1575b5050505050611f7b565b5b15610b245760019250610b40565b6040518060600160405280603f8152602001613ae1603f913991505b5b5b509250929050565b610b548383611f7b565b15610b94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8b90612f64565b60405180910390fd5b610b9e8183611f7b565b15610bde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd590612fe4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4490613004565b60405180910390fd5b60005b8251811015610d5a57828181518110610c92577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16838281518110610ce9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3e90613064565b60405180910390fd5b8080610d5290613367565b915050610c50565b50505050565b6060610d76826000611e6190919063ffffffff16565b610db5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dac90613024565b60405180910390fd5b6000600260008481526020019081526020016000209050806001018054610ddb90613304565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0790613304565b8015610e545780601f10610e2957610100808354040283529160200191610e54565b820191906000526020600020905b815481529060010190602001808311610e3757829003601f168201915b5050505050915050919050565b600080610e6e6000612029565b1415610ea057610e95604051806060016040528060278152602001613a2d60279139611ee2565b6000801b9050610eb7565b610eb482600061203a90919063ffffffff16565b90505b919050565b610ed0816000611e6190919063ffffffff16565b610f0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0690613044565b60405180910390fd5b6000600260008381526020019081526020016000206040518061012001604052908160008201548152602001600182018054610f4a90613304565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7690613304565b8015610fc35780601f10610f9857610100808354040283529160200191610fc3565b820191906000526020600020905b815481529060010190602001808311610fa657829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054806020026020016040519081016040528092919081815260200182805480156110a757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161105d575b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff16600581111561116f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058111156111a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81525050905060008160a00151146111f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111eb90612ea4565b60405180910390fd5b806040015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125d906130a4565b60405180910390fd5b61127a82600061208b90919063ffffffff16565b600260008381526020019081526020016000206000808201600090556001820160006112a691906123c7565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006112dd9190612407565b6004820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556005820160009055600682016000905560078201600090556008820160006101000a81549060ff021916905550507fe766bc0652d21f92ea757a24078cf3ba4f6171072af865e53ac3e2a015ae55493383604051611363929190612d3c565b60405180910390a15050565b600061137c868633610b4a565b600061138b8585338a4261222f565b90506113a181600061226b90919063ffffffff16565b6000600260008381526020019081526020016000209050818160000181905550858160010190805190602001906113d9929190612428565b50878160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550868160030190805190602001906114359291906124ae565b50348160050181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160060181905550848160070181905550838160080160006101000a81548160ff021916908360058111156114e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055506115076040518060800160405280604481526020016139e960449139611ee2565b6115148160000154612305565b7f71836473c7d4e03149f5d37496d84c17e256bd578c523d9bd3746062a815ea0f338260000154604051611549929190612d3c565b60405180910390a180600001549250505095945050505050565b611577856000611e6190919063ffffffff16565b6115b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ad90612ec4565b60405180910390fd5b60006002600087815260200190815260200160002090508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461165f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165690612fc4565b60405180910390fd5b82816001019080519060200190611677929190612428565b50611683858533610b4a565b600060058111156116bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160080160009054906101000a900460ff166005811115611707577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415801561177457508473ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580611773575081816007015414155b5b156117b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ab90612f84565b60405180910390fd5b600060058111156117ee577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160080160009054906101000a900460ff166005811115611838577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156118e157848160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838160030190805190602001906118999291906124ae565b508181600701819055507f66e6839589f26b1bd112792bf0b42f8e9de76efa06fd794c144829319eed48fd3382600001546040516118d8929190612d3c565b60405180910390a15b505050505050565b6000606060006060600080600080600061190d8a6000611e6190919063ffffffff16565b61194c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194390612ee4565b60405180910390fd5b6000600260008c815260200190815260200160002090508060000154816001018260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836003018460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560050154866006015487600701548860080160009054906101000a900460ff168780546119e790613304565b80601f0160208091040260200160405190810160405280929190818152602001828054611a1390613304565b8015611a605780601f10611a3557610100808354040283529160200191611a60565b820191906000526020600020905b815481529060010190602001808311611a4357829003601f168201915b5050505050975085805480602002602001604051908101604052809291908181526020018280548015611ae857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a9e575b50505050509550995099509950995099509950995099509950509193959799909294969850565b611b23816000611e6190919063ffffffff16565b611b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5990612fa4565b60405180910390fd5b6000600260008381526020019081526020016000206040518061012001604052908160008201548152602001600182018054611b9d90613304565b80601f0160208091040260200160405190810160405280929190818152602001828054611bc990613304565b8015611c165780601f10611beb57610100808354040283529160200191611c16565b820191906000526020600020905b815481529060010190602001808311611bf957829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805480602002602001604051908101604052809291908181526020018280548015611cfa57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611cb0575b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff166005811115611dc2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811115611dfa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815250509050611e3e6040518060400160405280602081526020017f54727573742e736f6c202d207769746864726177416c6c28292c206b65793a20815250611ee2565b611e4c828260a001516102d3565b5050565b6000611e5c6000612029565b905090565b60008083600101805490501415611e7b5760009050611edc565b81836001018460000160008581526020019081526020016000205481548110611ecd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001541490505b92915050565b611f7881604051602401611ef69190612e82565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061239e565b50565b600080600090505b825181101561201d57828181518110611fc5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561200a576001915050612023565b808061201590613367565b915050611f83565b50600090505b92915050565b600081600101805490509050919050565b6000826001018281548110612078577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b6120958282611e61565b6120d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120cb90612f04565b60405180910390fd5b600060016120e184612029565b6120eb9190613217565b905060008360000160008481526020019081526020016000205490508181146121c057600084600101838154811061214c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508185600001600083815260200190815260200160002081905550808560010183815481106121b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200181905550505b8360000160008481526020019081526020016000206000905583600101805480612213577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000858585858560405160200161224a959493929190612ce1565b60405160208183030381529060405280519060200120905095945050505050565b6122758282611e61565b156122b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ac90613084565b60405180910390fd5b816001018054905082600001600083815260200190815260200160002081905550816001018190806001815401808255809150506001900390600052602060002001600090919091909150555050565b61239b816040516024016123199190612dcc565b6040516020818303038152906040527f27b7cf85000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061239e565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b5080546123d390613304565b6000825580601f106123e55750612404565b601f0160209004906000526020600020908101906124039190612538565b5b50565b50805460008255906000526020600020908101906124259190612538565b50565b82805461243490613304565b90600052602060002090601f016020900481019282612456576000855561249d565b82601f1061246f57805160ff191683800117855561249d565b8280016001018555821561249d579182015b8281111561249c578251825591602001919060010190612481565b5b5090506124aa9190612538565b5090565b828054828255906000526020600020908101928215612527579160200282015b828111156125265782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906124ce565b5b5090506125349190612538565b5090565b5b80821115612551576000816000905550600101612539565b5090565b600061256861256384613104565b6130df565b9050808382526020820190508285602086028201111561258757600080fd5b60005b858110156125b7578161259d88826125ff565b84526020840193506020830192505060018101905061258a565b5050509392505050565b60006125d46125cf84613130565b6130df565b9050828152602081018484840111156125ec57600080fd5b6125f78482856132c2565b509392505050565b60008135905061260e8161394d565b92915050565b600082601f83011261262557600080fd5b8135612635848260208601612555565b91505092915050565b60008135905061264d81613964565b92915050565b6000813590506126628161397b565b92915050565b600082601f83011261267957600080fd5b81356126898482602086016125c1565b91505092915050565b6000813590506126a18161398b565b92915050565b6000806000606084860312156126bc57600080fd5b60006126ca868287016125ff565b935050602084013567ffffffffffffffff8111156126e757600080fd5b6126f386828701612614565b9250506040612704868287016125ff565b9150509250925092565b600080600080600060a0868803121561272657600080fd5b6000612734888289016125ff565b955050602086013567ffffffffffffffff81111561275157600080fd5b61275d88828901612614565b945050604086013567ffffffffffffffff81111561277a57600080fd5b61278688828901612668565b935050606061279788828901612692565b92505060806127a888828901612653565b9150509295509295909350565b6000602082840312156127c757600080fd5b60006127d58482850161263e565b91505092915050565b600080604083850312156127f157600080fd5b60006127ff8582860161263e565b9250506020612810858286016125ff565b9150509250929050565b600080600080600060a0868803121561283257600080fd5b60006128408882890161263e565b9550506020612851888289016125ff565b945050604086013567ffffffffffffffff81111561286e57600080fd5b61287a88828901612614565b935050606086013567ffffffffffffffff81111561289757600080fd5b6128a388828901612668565b92505060806128b488828901612692565b9150509295509295909350565b600080604083850312156128d457600080fd5b60006128e28582860161263e565b92505060206128f385828601612692565b9150509250929050565b60006020828403121561290f57600080fd5b600061291d84828501612692565b91505092915050565b6000612932838361293e565b60208301905092915050565b6129478161324b565b82525050565b6129568161324b565b82525050565b61296d6129688261324b565b6133b0565b82525050565b600061297e82613171565b6129888185613194565b935061299383613161565b8060005b838110156129c45781516129ab8882612926565b97506129b683613187565b925050600181019050612997565b5085935050505092915050565b6129da8161325d565b82525050565b6129e981613269565b82525050565b6129f8816132b0565b82525050565b6000612a098261317c565b612a1381856131a5565b9350612a238185602086016132d1565b612a2c8161349a565b840191505092915050565b6000612a428261317c565b612a4c81856131b6565b9350612a5c8185602086016132d1565b80840191505092915050565b6000612a756030836131a5565b9150612a80826134b8565b604082019050919050565b6000612a986028836131a5565b9150612aa382613507565b604082019050919050565b6000612abb6025836131a5565b9150612ac682613556565b604082019050919050565b6000612ade602a836131a5565b9150612ae9826135a5565b604082019050919050565b6000612b016031836131a5565b9150612b0c826135f4565b604082019050919050565b6000612b24602e836131a5565b9150612b2f82613643565b604082019050919050565b6000612b47601f836131a5565b9150612b5282613692565b602082019050919050565b6000612b6a6050836131a5565b9150612b75826136bb565b606082019050919050565b6000612b8d6014836131a5565b9150612b9882613730565b602082019050919050565b6000612bb06027836131a5565b9150612bbb82613759565b604082019050919050565b6000612bd3601b836131a5565b9150612bde826137a8565b602082019050919050565b6000612bf6601d836131a5565b9150612c01826137d1565b602082019050919050565b6000612c19600f836131a5565b9150612c24826137fa565b602082019050919050565b6000612c3c6028836131a5565b9150612c4782613823565b604082019050919050565b6000612c5f6017836131a5565b9150612c6a82613872565b602082019050919050565b6000612c82602a836131a5565b9150612c8d8261389b565b604082019050919050565b6000612ca56027836131a5565b9150612cb0826138ea565b604082019050919050565b612cc4816132a6565b82525050565b612cdb612cd6826132a6565b6133d4565b82525050565b6000612ced8288612a37565b9150612cf98287612cca565b602082019150612d09828661295c565b601482019150612d19828561295c565b601482019150612d298284612cca565b6020820191508190509695505050505050565b6000604082019050612d51600083018561294d565b612d5e60208301846129e0565b9392505050565b6000606082019050612d7a600083018661294d565b612d8760208301856129e0565b612d946040830184612cbb565b949350505050565b6000604082019050612db160008301856129d1565b8181036020830152612dc381846129fe565b90509392505050565b6000602082019050612de160008301846129e0565b92915050565b600061012082019050612dfd600083018c6129e0565b8181036020830152612e0f818b6129fe565b9050612e1e604083018a61294d565b8181036060830152612e308189612973565b9050612e3f608083018861294d565b612e4c60a0830187612cbb565b612e5960c0830186612cbb565b612e6660e0830185612cbb565b612e746101008301846129ef565b9a9950505050505050505050565b60006020820190508181036000830152612e9c81846129fe565b905092915050565b60006020820190508181036000830152612ebd81612a68565b9050919050565b60006020820190508181036000830152612edd81612a8b565b9050919050565b60006020820190508181036000830152612efd81612aae565b9050919050565b60006020820190508181036000830152612f1d81612ad1565b9050919050565b60006020820190508181036000830152612f3d81612af4565b9050919050565b60006020820190508181036000830152612f5d81612b17565b9050919050565b60006020820190508181036000830152612f7d81612b3a565b9050919050565b60006020820190508181036000830152612f9d81612b5d565b9050919050565b60006020820190508181036000830152612fbd81612b80565b9050919050565b60006020820190508181036000830152612fdd81612ba3565b9050919050565b60006020820190508181036000830152612ffd81612bc6565b9050919050565b6000602082019050818103600083015261301d81612be9565b9050919050565b6000602082019050818103600083015261303d81612c0c565b9050919050565b6000602082019050818103600083015261305d81612c2f565b9050919050565b6000602082019050818103600083015261307d81612c52565b9050919050565b6000602082019050818103600083015261309d81612c75565b9050919050565b600060208201905081810360008301526130bd81612c98565b9050919050565b60006020820190506130d96000830184612cbb565b92915050565b60006130e96130fa565b90506130f58282613336565b919050565b6000604051905090565b600067ffffffffffffffff82111561311f5761311e61346b565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561314b5761314a61346b565b5b6131548261349a565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006131cc826132a6565b91506131d7836132a6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561320c5761320b6133de565b5b828201905092915050565b6000613222826132a6565b915061322d836132a6565b9250828210156132405761323f6133de565b5b828203905092915050565b600061325682613286565b9050919050565b60008115159050919050565b6000819050919050565b600081905061328182613939565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006132bb82613273565b9050919050565b82818337600083830152505050565b60005b838110156132ef5780820151818401526020810190506132d4565b838111156132fe576000848401525b50505050565b6000600282049050600182168061331c57607f821691505b602082108114156133305761332f61343c565b5b50919050565b61333f8261349a565b810181811067ffffffffffffffff8211171561335e5761335d61346b565b5b80604052505050565b6000613372826132a6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156133a5576133a46133de565b5b600182019050919050565b60006133bb826133c2565b9050919050565b60006133cd826134ab565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f43616e27742064656c657465206120747275737420776974682065746865722c60008201527f2077697468647261772066697273742e00000000000000000000000000000000602082015250565b7f43616e2774207570646174652061207472757374207468617420646f65736e2760008201527f742065786973742e000000000000000000000000000000000000000000000000602082015250565b7f43616e2774206765742061207472757374207468617420646f65736e2774206560008201527f786973742e000000000000000000000000000000000000000000000000000000602082015250565b7f427974657333325365743a206b657920646f6573206e6f74206578697374206960008201527f6e20746865207365742e00000000000000000000000000000000000000000000602082015250565b7f62656e65666963696172792063616e206f6e6c7920776974686472617720414660008201527f544552206d617475726974792064617465000000000000000000000000000000602082015250565b7f43616e2774207769746864726177206d6f7265206574686572207468616e206560008201527f786973747320696e207472757374000000000000000000000000000000000000602082015250565b7f42656e65666963696172792063616e6e6f742062652061207472757374656500600082015250565b7f42656e65666963696172792c20547275737465657320616e64204d617475726960008201527f747920646174652063616e206f6e6c79206265207570646174656420696e206160208201527f205245564f4b41424c4520747275737400000000000000000000000000000000604082015250565b7f547275737420646f65736e27742065786973742e000000000000000000000000600082015250565b7f4f6e6c7920746865206772616e746f722063616e20757064617465207468697360008201527f2074727573742e00000000000000000000000000000000000000000000000000602082015250565b7f4772616e746f722063616e6e6f74206265206120747275737465650000000000600082015250565b7f42656e65666963696172792063616e6e6f74206265206772616e746f72000000600082015250565b7f5472757374206e6f7420666f756e640000000000000000000000000000000000600082015250565b7f43616e27742064656c6574652061207472757374207468617420646f65736e2760008201527f742065786973742e000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420547275737465652061646472657373000000000000000000600082015250565b7f427974657333325365743a206b657920616c726561647920657869737473206960008201527f6e20746865207365742e00000000000000000000000000000000000000000000602082015250565b7f4f6e6c7920746865206772616e746f722063616e2064656c657465207468697360008201527f2074727573742e00000000000000000000000000000000000000000000000000602082015250565b6006811061394a5761394961340d565b5b50565b6139568161324b565b811461396157600080fd5b50565b61396d81613269565b811461397857600080fd5b50565b6006811061398857600080fd5b50565b613994816132a6565b811461399f57600080fd5b5056fe49525245564f4b41424c452074797065207472757374206d61792062652077697468647261776e206f6e6c792062792062656e6566696369617279206f72207472757374656554727573742e736f6c3a3a63726561746554727573742829202d206372656174655472757374204576656e7420456d697474696e67204e4f572e2e2e2e3a204b45593a2067657454727573744174496e6465782829202d2074727573745365742e636f756e7420697320305245564f4b41424c452074797065207472757374206d61792062652077697468647261776e206f6e6c79206279206772616e746f722c2062656e6566696369617279206f72207472757374656554727573742e736f6c202d20776974686472617728292c206b65793a20247b6b65797d206574686572416d6f756e743a20247b5f6574686572416d6f756e747d44454641554c5420747275737420747970653a206d61792062652077697468647261776e206f6e6c79206279206772616e746f72206f722074727573746565a26469706673582212206a40982a3b996f95f0bd64eae5c3885a93f93d4f5fef2c7b166bf033e59c30f664736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063b6309f5611610064578063b6309f56146101c5578063b6a07ee7146101ee578063bf29b8591461021e578063c05fdce914610247578063c42c6e141461028c578063e80dfb9a146102a8576100a7565b8063040cf020146100ac5780630905fa12146100c85780632106764c146100e45780632f9088a81461012257806343782b981461014b578063891a193614610188575b600080fd5b6100c660048036038101906100c191906128c1565b6102d3565b005b6100e260048036038101906100dd91906127b5565b610554565b005b3480156100f057600080fd5b5061010b600480360381019061010691906127de565b610618565b604051610119929190612d9c565b60405180910390f35b34801561012e57600080fd5b50610149600480360381019061014491906126a7565b610b4a565b005b34801561015757600080fd5b50610172600480360381019061016d91906127b5565b610d60565b60405161017f9190612e82565b60405180910390f35b34801561019457600080fd5b506101af60048036038101906101aa91906128fd565b610e61565b6040516101bc9190612dcc565b60405180910390f35b3480156101d157600080fd5b506101ec60048036038101906101e791906127b5565b610ebc565b005b6102086004803603810190610203919061270e565b61136f565b6040516102159190612dcc565b60405180910390f35b34801561022a57600080fd5b506102456004803603810190610240919061281a565b611563565b005b34801561025357600080fd5b5061026e600480360381019061026991906127b5565b6118e9565b60405161028399989796959493929190612de7565b60405180910390f35b6102a660048036038101906102a191906127b5565b611b0f565b005b3480156102b457600080fd5b506102bd611e50565b6040516102ca91906130c4565b60405180910390f35b6102e7826000611e6190919063ffffffff16565b610326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031d90612fa4565b60405180910390fd5b600060026000848152602001908152602001600020905060008060405180602001604052806000815250905061035c8533610618565b8092508193505050816103a657806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039d9190612e82565b60405180910390fd5b8260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156104085750428360070154115b15610448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043f90612f24565b60405180910390fd5b826005015484111561048f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048690612f44565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f193505050501580156104d5573d6000803e3d6000fd5b50838360050160008282546104ea9190613217565b925050819055507f5ae28b04e258b744ffadc4e526ca76cd9c4647e0450f1a47d9e9e1b0d9ff2a1c33868660405161052493929190612d65565b60405180910390a161054d604051806060016040528060408152602001613aa160409139611ee2565b5050505050565b610568816000611e6190919063ffffffff16565b6105a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059e90612ec4565b60405180910390fd5b6000600260008381526020019081526020016000209050348160050160008282546105d291906131c1565b925050819055507f6eb28f0a04b486596652b2118fc11d3db7715c960d01ae45b38fd69df9b7886333833460405161060c93929190612d65565b60405180910390a15050565b60006060610630846000611e6190919063ffffffff16565b61066f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066690612fa4565b60405180910390fd5b6000600260008681526020019081526020016000209050600060058111156106c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160080160009054906101000a900460ff16600581111561070a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610885578060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806107bd57508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b806108565750610855848260030180548060200260200160405190810160405280929190818152602001828054801561084b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610801575b5050505050611f7b565b5b156108645760019250610880565b6040518060800160405280604d8152602001613a54604d913991505b610b42565b600160058111156108bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160080160009054906101000a900460ff166005811115610909577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610a2a578060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806109fb57506109fa84826003018054806020026020016040519081016040528092919081815260200182805480156109f057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116109a6575b5050505050611f7b565b5b15610a095760019250610a25565b6040518060800160405280604681526020016139a36046913991505b610b41565b8060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b165750610b158482600301805480602002602001604051908101604052809291908181526020018280548015610b0b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ac1575b5050505050611f7b565b5b15610b245760019250610b40565b6040518060600160405280603f8152602001613ae1603f913991505b5b5b509250929050565b610b548383611f7b565b15610b94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8b90612f64565b60405180910390fd5b610b9e8183611f7b565b15610bde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd590612fe4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4490613004565b60405180910390fd5b60005b8251811015610d5a57828181518110610c92577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16838281518110610ce9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3e90613064565b60405180910390fd5b8080610d5290613367565b915050610c50565b50505050565b6060610d76826000611e6190919063ffffffff16565b610db5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dac90613024565b60405180910390fd5b6000600260008481526020019081526020016000209050806001018054610ddb90613304565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0790613304565b8015610e545780601f10610e2957610100808354040283529160200191610e54565b820191906000526020600020905b815481529060010190602001808311610e3757829003601f168201915b5050505050915050919050565b600080610e6e6000612029565b1415610ea057610e95604051806060016040528060278152602001613a2d60279139611ee2565b6000801b9050610eb7565b610eb482600061203a90919063ffffffff16565b90505b919050565b610ed0816000611e6190919063ffffffff16565b610f0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0690613044565b60405180910390fd5b6000600260008381526020019081526020016000206040518061012001604052908160008201548152602001600182018054610f4a90613304565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7690613304565b8015610fc35780601f10610f9857610100808354040283529160200191610fc3565b820191906000526020600020905b815481529060010190602001808311610fa657829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054806020026020016040519081016040528092919081815260200182805480156110a757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161105d575b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff16600581111561116f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058111156111a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81525050905060008160a00151146111f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111eb90612ea4565b60405180910390fd5b806040015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125d906130a4565b60405180910390fd5b61127a82600061208b90919063ffffffff16565b600260008381526020019081526020016000206000808201600090556001820160006112a691906123c7565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006112dd9190612407565b6004820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556005820160009055600682016000905560078201600090556008820160006101000a81549060ff021916905550507fe766bc0652d21f92ea757a24078cf3ba4f6171072af865e53ac3e2a015ae55493383604051611363929190612d3c565b60405180910390a15050565b600061137c868633610b4a565b600061138b8585338a4261222f565b90506113a181600061226b90919063ffffffff16565b6000600260008381526020019081526020016000209050818160000181905550858160010190805190602001906113d9929190612428565b50878160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550868160030190805190602001906114359291906124ae565b50348160050181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160060181905550848160070181905550838160080160006101000a81548160ff021916908360058111156114e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055506115076040518060800160405280604481526020016139e960449139611ee2565b6115148160000154612305565b7f71836473c7d4e03149f5d37496d84c17e256bd578c523d9bd3746062a815ea0f338260000154604051611549929190612d3c565b60405180910390a180600001549250505095945050505050565b611577856000611e6190919063ffffffff16565b6115b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ad90612ec4565b60405180910390fd5b60006002600087815260200190815260200160002090508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461165f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165690612fc4565b60405180910390fd5b82816001019080519060200190611677929190612428565b50611683858533610b4a565b600060058111156116bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160080160009054906101000a900460ff166005811115611707577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415801561177457508473ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580611773575081816007015414155b5b156117b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ab90612f84565b60405180910390fd5b600060058111156117ee577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160080160009054906101000a900460ff166005811115611838577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156118e157848160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838160030190805190602001906118999291906124ae565b508181600701819055507f66e6839589f26b1bd112792bf0b42f8e9de76efa06fd794c144829319eed48fd3382600001546040516118d8929190612d3c565b60405180910390a15b505050505050565b6000606060006060600080600080600061190d8a6000611e6190919063ffffffff16565b61194c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194390612ee4565b60405180910390fd5b6000600260008c815260200190815260200160002090508060000154816001018260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836003018460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560050154866006015487600701548860080160009054906101000a900460ff168780546119e790613304565b80601f0160208091040260200160405190810160405280929190818152602001828054611a1390613304565b8015611a605780601f10611a3557610100808354040283529160200191611a60565b820191906000526020600020905b815481529060010190602001808311611a4357829003601f168201915b5050505050975085805480602002602001604051908101604052809291908181526020018280548015611ae857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a9e575b50505050509550995099509950995099509950995099509950509193959799909294969850565b611b23816000611e6190919063ffffffff16565b611b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5990612fa4565b60405180910390fd5b6000600260008381526020019081526020016000206040518061012001604052908160008201548152602001600182018054611b9d90613304565b80601f0160208091040260200160405190810160405280929190818152602001828054611bc990613304565b8015611c165780601f10611beb57610100808354040283529160200191611c16565b820191906000526020600020905b815481529060010190602001808311611bf957829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805480602002602001604051908101604052809291908181526020018280548015611cfa57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611cb0575b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff166005811115611dc2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811115611dfa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815250509050611e3e6040518060400160405280602081526020017f54727573742e736f6c202d207769746864726177416c6c28292c206b65793a20815250611ee2565b611e4c828260a001516102d3565b5050565b6000611e5c6000612029565b905090565b60008083600101805490501415611e7b5760009050611edc565b81836001018460000160008581526020019081526020016000205481548110611ecd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001541490505b92915050565b611f7881604051602401611ef69190612e82565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061239e565b50565b600080600090505b825181101561201d57828181518110611fc5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561200a576001915050612023565b808061201590613367565b915050611f83565b50600090505b92915050565b600081600101805490509050919050565b6000826001018281548110612078577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b6120958282611e61565b6120d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120cb90612f04565b60405180910390fd5b600060016120e184612029565b6120eb9190613217565b905060008360000160008481526020019081526020016000205490508181146121c057600084600101838154811061214c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508185600001600083815260200190815260200160002081905550808560010183815481106121b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200181905550505b8360000160008481526020019081526020016000206000905583600101805480612213577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000858585858560405160200161224a959493929190612ce1565b60405160208183030381529060405280519060200120905095945050505050565b6122758282611e61565b156122b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ac90613084565b60405180910390fd5b816001018054905082600001600083815260200190815260200160002081905550816001018190806001815401808255809150506001900390600052602060002001600090919091909150555050565b61239b816040516024016123199190612dcc565b6040516020818303038152906040527f27b7cf85000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061239e565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b5080546123d390613304565b6000825580601f106123e55750612404565b601f0160209004906000526020600020908101906124039190612538565b5b50565b50805460008255906000526020600020908101906124259190612538565b50565b82805461243490613304565b90600052602060002090601f016020900481019282612456576000855561249d565b82601f1061246f57805160ff191683800117855561249d565b8280016001018555821561249d579182015b8281111561249c578251825591602001919060010190612481565b5b5090506124aa9190612538565b5090565b828054828255906000526020600020908101928215612527579160200282015b828111156125265782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906124ce565b5b5090506125349190612538565b5090565b5b80821115612551576000816000905550600101612539565b5090565b600061256861256384613104565b6130df565b9050808382526020820190508285602086028201111561258757600080fd5b60005b858110156125b7578161259d88826125ff565b84526020840193506020830192505060018101905061258a565b5050509392505050565b60006125d46125cf84613130565b6130df565b9050828152602081018484840111156125ec57600080fd5b6125f78482856132c2565b509392505050565b60008135905061260e8161394d565b92915050565b600082601f83011261262557600080fd5b8135612635848260208601612555565b91505092915050565b60008135905061264d81613964565b92915050565b6000813590506126628161397b565b92915050565b600082601f83011261267957600080fd5b81356126898482602086016125c1565b91505092915050565b6000813590506126a18161398b565b92915050565b6000806000606084860312156126bc57600080fd5b60006126ca868287016125ff565b935050602084013567ffffffffffffffff8111156126e757600080fd5b6126f386828701612614565b9250506040612704868287016125ff565b9150509250925092565b600080600080600060a0868803121561272657600080fd5b6000612734888289016125ff565b955050602086013567ffffffffffffffff81111561275157600080fd5b61275d88828901612614565b945050604086013567ffffffffffffffff81111561277a57600080fd5b61278688828901612668565b935050606061279788828901612692565b92505060806127a888828901612653565b9150509295509295909350565b6000602082840312156127c757600080fd5b60006127d58482850161263e565b91505092915050565b600080604083850312156127f157600080fd5b60006127ff8582860161263e565b9250506020612810858286016125ff565b9150509250929050565b600080600080600060a0868803121561283257600080fd5b60006128408882890161263e565b9550506020612851888289016125ff565b945050604086013567ffffffffffffffff81111561286e57600080fd5b61287a88828901612614565b935050606086013567ffffffffffffffff81111561289757600080fd5b6128a388828901612668565b92505060806128b488828901612692565b9150509295509295909350565b600080604083850312156128d457600080fd5b60006128e28582860161263e565b92505060206128f385828601612692565b9150509250929050565b60006020828403121561290f57600080fd5b600061291d84828501612692565b91505092915050565b6000612932838361293e565b60208301905092915050565b6129478161324b565b82525050565b6129568161324b565b82525050565b61296d6129688261324b565b6133b0565b82525050565b600061297e82613171565b6129888185613194565b935061299383613161565b8060005b838110156129c45781516129ab8882612926565b97506129b683613187565b925050600181019050612997565b5085935050505092915050565b6129da8161325d565b82525050565b6129e981613269565b82525050565b6129f8816132b0565b82525050565b6000612a098261317c565b612a1381856131a5565b9350612a238185602086016132d1565b612a2c8161349a565b840191505092915050565b6000612a428261317c565b612a4c81856131b6565b9350612a5c8185602086016132d1565b80840191505092915050565b6000612a756030836131a5565b9150612a80826134b8565b604082019050919050565b6000612a986028836131a5565b9150612aa382613507565b604082019050919050565b6000612abb6025836131a5565b9150612ac682613556565b604082019050919050565b6000612ade602a836131a5565b9150612ae9826135a5565b604082019050919050565b6000612b016031836131a5565b9150612b0c826135f4565b604082019050919050565b6000612b24602e836131a5565b9150612b2f82613643565b604082019050919050565b6000612b47601f836131a5565b9150612b5282613692565b602082019050919050565b6000612b6a6050836131a5565b9150612b75826136bb565b606082019050919050565b6000612b8d6014836131a5565b9150612b9882613730565b602082019050919050565b6000612bb06027836131a5565b9150612bbb82613759565b604082019050919050565b6000612bd3601b836131a5565b9150612bde826137a8565b602082019050919050565b6000612bf6601d836131a5565b9150612c01826137d1565b602082019050919050565b6000612c19600f836131a5565b9150612c24826137fa565b602082019050919050565b6000612c3c6028836131a5565b9150612c4782613823565b604082019050919050565b6000612c5f6017836131a5565b9150612c6a82613872565b602082019050919050565b6000612c82602a836131a5565b9150612c8d8261389b565b604082019050919050565b6000612ca56027836131a5565b9150612cb0826138ea565b604082019050919050565b612cc4816132a6565b82525050565b612cdb612cd6826132a6565b6133d4565b82525050565b6000612ced8288612a37565b9150612cf98287612cca565b602082019150612d09828661295c565b601482019150612d19828561295c565b601482019150612d298284612cca565b6020820191508190509695505050505050565b6000604082019050612d51600083018561294d565b612d5e60208301846129e0565b9392505050565b6000606082019050612d7a600083018661294d565b612d8760208301856129e0565b612d946040830184612cbb565b949350505050565b6000604082019050612db160008301856129d1565b8181036020830152612dc381846129fe565b90509392505050565b6000602082019050612de160008301846129e0565b92915050565b600061012082019050612dfd600083018c6129e0565b8181036020830152612e0f818b6129fe565b9050612e1e604083018a61294d565b8181036060830152612e308189612973565b9050612e3f608083018861294d565b612e4c60a0830187612cbb565b612e5960c0830186612cbb565b612e6660e0830185612cbb565b612e746101008301846129ef565b9a9950505050505050505050565b60006020820190508181036000830152612e9c81846129fe565b905092915050565b60006020820190508181036000830152612ebd81612a68565b9050919050565b60006020820190508181036000830152612edd81612a8b565b9050919050565b60006020820190508181036000830152612efd81612aae565b9050919050565b60006020820190508181036000830152612f1d81612ad1565b9050919050565b60006020820190508181036000830152612f3d81612af4565b9050919050565b60006020820190508181036000830152612f5d81612b17565b9050919050565b60006020820190508181036000830152612f7d81612b3a565b9050919050565b60006020820190508181036000830152612f9d81612b5d565b9050919050565b60006020820190508181036000830152612fbd81612b80565b9050919050565b60006020820190508181036000830152612fdd81612ba3565b9050919050565b60006020820190508181036000830152612ffd81612bc6565b9050919050565b6000602082019050818103600083015261301d81612be9565b9050919050565b6000602082019050818103600083015261303d81612c0c565b9050919050565b6000602082019050818103600083015261305d81612c2f565b9050919050565b6000602082019050818103600083015261307d81612c52565b9050919050565b6000602082019050818103600083015261309d81612c75565b9050919050565b600060208201905081810360008301526130bd81612c98565b9050919050565b60006020820190506130d96000830184612cbb565b92915050565b60006130e96130fa565b90506130f58282613336565b919050565b6000604051905090565b600067ffffffffffffffff82111561311f5761311e61346b565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561314b5761314a61346b565b5b6131548261349a565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006131cc826132a6565b91506131d7836132a6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561320c5761320b6133de565b5b828201905092915050565b6000613222826132a6565b915061322d836132a6565b9250828210156132405761323f6133de565b5b828203905092915050565b600061325682613286565b9050919050565b60008115159050919050565b6000819050919050565b600081905061328182613939565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006132bb82613273565b9050919050565b82818337600083830152505050565b60005b838110156132ef5780820151818401526020810190506132d4565b838111156132fe576000848401525b50505050565b6000600282049050600182168061331c57607f821691505b602082108114156133305761332f61343c565b5b50919050565b61333f8261349a565b810181811067ffffffffffffffff8211171561335e5761335d61346b565b5b80604052505050565b6000613372826132a6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156133a5576133a46133de565b5b600182019050919050565b60006133bb826133c2565b9050919050565b60006133cd826134ab565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f43616e27742064656c657465206120747275737420776974682065746865722c60008201527f2077697468647261772066697273742e00000000000000000000000000000000602082015250565b7f43616e2774207570646174652061207472757374207468617420646f65736e2760008201527f742065786973742e000000000000000000000000000000000000000000000000602082015250565b7f43616e2774206765742061207472757374207468617420646f65736e2774206560008201527f786973742e000000000000000000000000000000000000000000000000000000602082015250565b7f427974657333325365743a206b657920646f6573206e6f74206578697374206960008201527f6e20746865207365742e00000000000000000000000000000000000000000000602082015250565b7f62656e65666963696172792063616e206f6e6c7920776974686472617720414660008201527f544552206d617475726974792064617465000000000000000000000000000000602082015250565b7f43616e2774207769746864726177206d6f7265206574686572207468616e206560008201527f786973747320696e207472757374000000000000000000000000000000000000602082015250565b7f42656e65666963696172792063616e6e6f742062652061207472757374656500600082015250565b7f42656e65666963696172792c20547275737465657320616e64204d617475726960008201527f747920646174652063616e206f6e6c79206265207570646174656420696e206160208201527f205245564f4b41424c4520747275737400000000000000000000000000000000604082015250565b7f547275737420646f65736e27742065786973742e000000000000000000000000600082015250565b7f4f6e6c7920746865206772616e746f722063616e20757064617465207468697360008201527f2074727573742e00000000000000000000000000000000000000000000000000602082015250565b7f4772616e746f722063616e6e6f74206265206120747275737465650000000000600082015250565b7f42656e65666963696172792063616e6e6f74206265206772616e746f72000000600082015250565b7f5472757374206e6f7420666f756e640000000000000000000000000000000000600082015250565b7f43616e27742064656c6574652061207472757374207468617420646f65736e2760008201527f742065786973742e000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420547275737465652061646472657373000000000000000000600082015250565b7f427974657333325365743a206b657920616c726561647920657869737473206960008201527f6e20746865207365742e00000000000000000000000000000000000000000000602082015250565b7f4f6e6c7920746865206772616e746f722063616e2064656c657465207468697360008201527f2074727573742e00000000000000000000000000000000000000000000000000602082015250565b6006811061394a5761394961340d565b5b50565b6139568161324b565b811461396157600080fd5b50565b61396d81613269565b811461397857600080fd5b50565b6006811061398857600080fd5b50565b613994816132a6565b811461399f57600080fd5b5056fe49525245564f4b41424c452074797065207472757374206d61792062652077697468647261776e206f6e6c792062792062656e6566696369617279206f72207472757374656554727573742e736f6c3a3a63726561746554727573742829202d206372656174655472757374204576656e7420456d697474696e67204e4f572e2e2e2e3a204b45593a2067657454727573744174496e6465782829202d2074727573745365742e636f756e7420697320305245564f4b41424c452074797065207472757374206d61792062652077697468647261776e206f6e6c79206279206772616e746f722c2062656e6566696369617279206f72207472757374656554727573742e736f6c202d20776974686472617728292c206b65793a20247b6b65797d206574686572416d6f756e743a20247b5f6574686572416d6f756e747d44454641554c5420747275737420747970653a206d61792062652077697468647261776e206f6e6c79206279206772616e746f72206f722074727573746565a26469706673582212206a40982a3b996f95f0bd64eae5c3885a93f93d4f5fef2c7b166bf033e59c30f664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createTrust(address,address[],string,uint256,uint8)": {
        "params": {
          "beneficiary": "Who is this for",
          "maturityDate": "When this trust matures (is accessible)",
          "name": "Name of trust",
          "trustType": "Type of trust",
          "trustees": "Trustee to manage trust"
        }
      },
      "validateAddresses(address,address[],address)": {
        "params": {
          "beneficiary": "Beneficiary string",
          "sender": "msg.Sender",
          "trustees": "Trustees"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor function"
      },
      "createTrust(address,address[],string,uint256,uint8)": {
        "notice": "Create a new trust"
      },
      "validateAddresses(address,address[],address)": {
        "notice": "Validate address fields for a trust"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8259,
        "contract": "src/contracts/Trusts.sol:Trusts",
        "label": "trustSet",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Set)8073_storage"
      },
      {
        "astId": 8297,
        "contract": "src/contracts/Trusts.sol:Trusts",
        "label": "trusts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Trust)8292_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(TrustType)8266": {
        "encoding": "inplace",
        "label": "enum Trusts.TrustType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(Trust)8292_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Trusts.Trust)",
        "numberOfBytes": "32",
        "value": "t_struct(Trust)8292_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Set)8073_storage": {
        "encoding": "inplace",
        "label": "struct Bytes32Set.Set",
        "members": [
          {
            "astId": 8069,
            "contract": "src/contracts/Trusts.sol:Trusts",
            "label": "keyPointers",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 8072,
            "contract": "src/contracts/Trusts.sol:Trusts",
            "label": "keyList",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Trust)8292_storage": {
        "encoding": "inplace",
        "label": "struct Trusts.Trust",
        "members": [
          {
            "astId": 8273,
            "contract": "src/contracts/Trusts.sol:Trusts",
            "label": "key",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8275,
            "contract": "src/contracts/Trusts.sol:Trusts",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 8277,
            "contract": "src/contracts/Trusts.sol:Trusts",
            "label": "grantor",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 8280,
            "contract": "src/contracts/Trusts.sol:Trusts",
            "label": "trustees",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 8282,
            "contract": "src/contracts/Trusts.sol:Trusts",
            "label": "beneficiary",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 8284,
            "contract": "src/contracts/Trusts.sol:Trusts",
            "label": "etherAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8286,
            "contract": "src/contracts/Trusts.sol:Trusts",
            "label": "createdDate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8288,
            "contract": "src/contracts/Trusts.sol:Trusts",
            "label": "maturityDate",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8291,
            "contract": "src/contracts/Trusts.sol:Trusts",
            "label": "trustType",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(TrustType)8266"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}